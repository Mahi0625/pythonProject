import os
import sqlite3
import pandas as pd
import xlsxwriter
from scraper import scrape_products
from notifier import send_notification
from utils import load_inserted_products, update_inserted_products

# Define a function to create an Excel file with multiple sheets
def create_excel_file(categories):
    workbook = xlsxwriter.Workbook('products.xlsx')
    
    for _, category_name in categories:
        workbook.add_worksheet(category_name)
    
    workbook.close()

# Define the main function to scrape, process, and store data
def main_function(url, category_name, existing_df):
    # Scrape the website
    product_cards = scrape_products(url)

    # Set up SQLite database connection
    conn = sqlite3.connect('products_database.db')
    c = conn.cursor()

    # Create products table if not exists
    c.execute('''CREATE TABLE IF NOT EXISTS products (
        product_name TEXT,
        original_price TEXT,
        discounted_price TEXT,
        discount TEXT,
        category TEXT,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    # Load the set of inserted products from the file
    inserted_products = load_inserted_products('inserted_products.txt')

    # Lists to keep track of new and updated products
    new_products = []
    updated_products = []

    # Process and store data
    for card in product_cards:
        product_name = card.find("h6", class_="product-name").find("a").text.strip()
        original_price = card.find("h6", class_="product-price").find("del").text.strip() if card.find("h6", class_="product-price").find("del") else None
        discounted_price = card.find("h6", class_="product-price").find("span").text.strip()
        discount_label = card.find("label", class_="label-text new")
        discount = discount_label.text.strip() if discount_label else "No Discount"
        
        # Check if the product is new or updated
        if product_name not in inserted_products:
            new_products.append((product_name, discounted_price))
            inserted_products.add(product_name)  # Change append to add
        else:
            existing_product = c.execute("SELECT DISTINCT * FROM products WHERE product_name=?", (product_name,)).fetchone()
            if existing_product and existing_product[2] != discounted_price:
                updated_products.append((product_name, existing_product[2], discounted_price, discount))
            
        # Update or insert the product details in the database
        c.execute('''INSERT OR REPLACE INTO products (product_name, original_price, discounted_price, discount, category) VALUES (?,?,?,?,?)''',
                  (product_name, original_price, discounted_price, discount, category_name))

    # Commit changes and close database connection
    conn.commit()
    conn.close()

    # Update the inserted products file
    update_inserted_products('inserted_products.txt', inserted_products)

    return new_products, updated_products

if __name__ == "__main__":
    categories = [
        ('https://vegease.in/cat/Fresh-Vegetables/cid/6311b3e81458f15168b7b0a2/6311b47c1458f15168b7b0a3', 'Fresh vegetables'),
        ('https://vegease.in/cat/Leafy--Herbs-&-Seasonings/cid/6311b3e81458f15168b7b0a2/635f6e8bdc08554fa2b9ae79', 'Leafy, Herbs & Seasonings'),
        ('https://vegease.in/cat/Vegetables-Exotic/cid/6311b3e81458f15168b7b0a2/6381bdb2b6396913e78b2590', 'Exotic vegetables'),
        ('https://vegease.in/cat/Fresh-Fruits/Fresh-Fruits/cid/6311b39a1458f15168b7b09f/6311b4a61458f15168b7b0a4', 'Fresh fruits'),
        ('https://vegease.in/cat/Fruits-Exotic/cid/6311b39a1458f15168b7b09f/6381bdf6b6396913e78b2592', 'Exotic fruits')
    ]

    # Create Excel file with sheets if it doesn't exist
    if not os.path.isfile('products.xlsx'):
        create_excel_file(categories)

    all_new_products = {}
    all_updated_products = {}
    existing_df = pd.DataFrame()  # Initialize an empty DataFrame to store existing data

    for url, category in categories:
        new_category_products, updated_category_products = main_function(url, category, existing_df)
        all_new_products[category] = new_category_products
        all_updated_products[category] = updated_category_products

    # Concatenate the existing DataFrame with new data
    for category in categories:
        category_name = category[1]
        conn = sqlite3.connect('products_database.db')
        df = pd.read_sql_query(f"SELECT * FROM products WHERE category='{category_name}'", conn)
        conn.close()
        existing_df = pd.concat([existing_df, df], ignore_index=True)

        # Remove duplicates from the combined DataFrame
        existing_df.drop_duplicates(subset=["product_name"], keep="last", inplace=True)

    # Update Excel file and sheets with the combined data
    with pd.ExcelWriter('products.xlsx', engine='xlsxwriter') as writer:
        for category in categories:
            category_name = category[1]
            df_category = existing_df[existing_df["category"] == category_name]
            df_category.to_excel(writer, sheet_name=category_name, index=False)

    # Prepare notification messages for new and updated products
    new_products_notification_text = "\n".join([f"Category: {category}\n{', '.join([f'Product: {product} - Price: {price}' for product, price in products])}" for category, products in all_new_products.items() if products])
    updated_products_notification_text = "\n".join([f"Category: {category}\n{', '.join([f'Product: {product} - Old Price: {old_price}, New Price: {new_price}, Discount: {discount}' for product, old_price, new_price, discount in products])}" for category, products in all_updated_products.items() if products])

    # Send notifications for new and updated products
    if new_products_notification_text:
        send_notification("New Products Alert", f"New products added:\n{new_products_notification_text}\nCheck them out!")

    if updated_products_notification_text:
        send_notification("Price Changes Alert", f"Price changes detected:\n{updated_products_notification_text}\nTime to grab a deal!")